getgenv().Config = {
    ["Account Hold Gem"] = "congahpz000",
    ["Gem"] = "500m",
    ["% Sell Item"] = 60,
}
getgenv().hugemode = {
    [1] = {
        ["Min"] = "1m",
        ["Max"] = "50m",
        ["% Sell"] = 90,
    },
    [2] = {
        ["Min"] = "51m",
        ["Max"] = "100m",
        ["% Sell"] = 90,
    },
    [3] = {
        ["Min"] = "101m",
        ["Max"] = "500m",
        ["% Sell"] = 80,
    },
    [4] = {
        ["Min"] = "501m",
        ["Max"] = "5000m",
        ["% Sell"] = 70,
    }
}
getgenv().item = {
    "Hellfire Gift",
    "Hype Egg",
    "2024 Anniversary Gift",
    "Mega Lucky Gingerbread",
    "Magic Shard",
    "Bucket",
    "Bucket O' Magic",
    "Snowflake Gift",
    "2024 Medium Christmas Present",
    "2024 Large Christmas Present",
    "2024 X-Large Christmas Present",
    "2024 Small Christmas Present"
}
repeat wait() until game:IsLoaded()
local VirtualUser = game:service 'VirtualUser'
game:service('Players').LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

repeat
    wait()
until game:IsLoaded() and
    game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui") and
    game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("MainLeft") and
    game:GetService("Players").LocalPlayer.PlayerGui.MainLeft.Left.Currency.Diamonds.Diamonds.Visible == true and
    not game:GetService("Players").LocalPlayer:FindFirstChild("GUIFX Holder")
local save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local v_u_5 = require(game.ReplicatedStorage.Library.Functions)
local totalhuge = 0
spawn(function()
    while wait() do
        totalhuge = 0
        for i, v in pairs(save.Get().Inventory.Pet) do
            if string.find(v.id, "Huge") then
                totalhuge = totalhuge + 1
            end
        end
    end
end)
if game.PlaceId == 8737899170 then
    local TeleportService = game:GetService("TeleportService")
    if totalhuge >= 5 then
        TeleportService:Teleport(15588442388)
    else
        TeleportService:Teleport(15502339080)
    end
end


if game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
    function getnearboot()
        local pos
        local distance = math.huge
        local id = nil

        for i, v in next, workspace.TradingPlaza.BoothSpawns:GetChildren() do
            local boothPosition = v.WorldPivot.Position
            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position
            local currentDistance = (boothPosition - playerPosition).Magnitude

            if currentDistance < distance then
                distance = currentDistance
                pos = boothPosition
                id = v:GetAttribute("ID")
            end
        end
        return pos, id
    end

    local pos, id = getnearboot()

    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos + Vector3.new(-5, 5, 0))
    wait()

    local args = {
        [1] = tostring(id)
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Booths_ClaimBooth"):InvokeServer(unpack(
        args))
    local Items = require(game:GetService("ReplicatedStorage").Library.Items.Types)
    game:GetService("Players").LocalPlayer.PlayerGui._MACHINES.MailboxMachine.Enabled = true
    local gemneedsend = game:GetService("Players").LocalPlayer.PlayerGui._MACHINES.MailboxMachine.Frame.SendFrame.Bottom
        .Diamonds.Frame.Amount.Text
    function sendgem(iditem)
        local args = {
            [1] = getgenv().Config["Account Hold Gem"],
            [2] = "Made By Honglamx",
            [3] = "Currency",
            [4] = tostring(iditem),
            [5] = game:GetService("Players").LocalPlayer.leaderstats["\240\159\146\142 Diamonds"].Value -
                v_u_5.ParseNumberSmart(gemneedsend)
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox: Send"):InvokeServer(
            unpack(args))
    end

    spawn(function()
        while wait() do
            if game:GetService("Players").LocalPlayer.leaderstats["\240\159\146\142 Diamonds"].Value >= v_u_5.ParseNumberSmart(getgenv().Config["Gem"]) then
                for i, v in pairs(save.Get().Inventory.Currency) do
                    if v.id == "Diamonds" then
                        sendgem(i)
                    end
                end
            end
        end
    end)
    while wait() do
        if game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
            for i, v in pairs(save.Get().Inventory.Lootbox) do
                if table.find(getgenv().item, v.id) then
                    if v._am > 5000 then
                        local petItem = Items.Types["Lootbox"]:Get(i)
                        local petRAP = petItem:GetDevRAP() or 0
                        local args = {
                            [1] = tostring(i),
                            [2] = math.floor(petRAP * (getgenv().Config["% Sell Item"] / 100)),
                            [3] = 5000
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                            "Booths_CreateListing"):InvokeServer(unpack(args))
                        task.wait(1)
                    else
                        local petItem = Items.Types["Lootbox"]:Get(i)
                        local petRAP = petItem:GetDevRAP() or 0
                        local args = {
                            [1] = tostring(i),
                            [2] = math.floor(petRAP * (getgenv().Config["% Sell Item"] / 100)),
                            [3] = v._am
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                            "Booths_CreateListing"):InvokeServer(unpack(args))
                        task.wait(1)
                    end
                end
            end
            for i, v in pairs(save.Get().Inventory.Misc) do
                if table.find(getgenv().item, v.id) then
                    if v._am > 5000 then
                        local petItem = Items.Types["Misc"]:Get(i)
                        local petRAP = petItem:GetDevRAP() or 0
                        local args = {
                            [1] = tostring(i),
                            [2] = math.floor(petRAP * (getgenv().Config["% Sell Item"] / 100)),
                            [3] = 5000
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                            "Booths_CreateListing"):InvokeServer(unpack(args))
                        task.wait(1)
                    else
                        local petItem = Items.Types["Misc"]:Get(i)
                        local petRAP = petItem:GetDevRAP() or 0
                        local args = {
                            [1] = tostring(i),
                            [2] = math.floor(petRAP * (getgenv().Config["% Sell Item"] / 100)),
                            [3] = v._am
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                            "Booths_CreateListing"):InvokeServer(unpack(args))
                        task.wait(1)
                    end
                end
            end
            --v_u_5.ParseNumberSmart(gemneedsend)
            for i, v in pairs(save.Get().Inventory.Pet) do
                if string.find(v.id, "Huge") then
                    local petItem = Items.Types["Pet"]:Get(i)
                    local petRAP = petItem:GetDevRAP() or 0

                    for _, range in pairs(getgenv().hugemode) do
                        local minRAP = v_u_5.ParseNumberSmart(range.Min)
                        local maxRAP = v_u_5.ParseNumberSmart(range.Max)

                        if minRAP <= petRAP and petRAP <= maxRAP then
                            local sellPercentage = range["% Sell"]
                            local price = math.floor(petRAP * (sellPercentage / 100))
                            local args = {
                                [1] = tostring(i),
                                [2] = price,
                                [3] = v._am or 1
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild(
                                "Booths_CreateListing"):InvokeServer(unpack(args))
                            task.wait(1)
                        end
                    end
                end
            end
        end
    end
end
